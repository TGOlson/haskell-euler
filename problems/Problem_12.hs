-- Highly divisible triangular number
-- Problem 12
-- The sequence of triangle numbers is generated by adding the natural numbers.
-- So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
-- The first ten terms would be:
--
-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--
-- Let us list the factors of the first seven triangle numbers:
--
--  1: 1
--  3: 1,3
--  6: 1,2,3,6
-- 10: 1,2,5,10
-- 15: 1,3,5,15
-- 21: 1,3,7,21
-- 28: 1,2,4,7,14,28
-- We can see that 28 is the first triangle number to have over five divisors.
--
-- What is the value of the first triangle number to have over five hundred
-- divisors?

module Problem_12 where

import Factors

triangles :: [Int]
triangles = scanl1 (+) [1..]

nthTriangle :: Int -> Int
nthTriangle x = sum [1..x]

triangleWithNFactors :: Int -> Int
triangleWithNFactors x = nthTriangle . (+1) . length $ takeWhile ((< x) . numFactors) triangles
-- the nthTriangle length +1 part is weird - how could we take while inclusive?

problem12 :: Int
problem12 = triangleWithNFactors 500
